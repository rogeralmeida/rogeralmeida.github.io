<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Roger Almeida's Opinion]]></title>
  <link href="http://rogeralmeida.github.io/atom.xml" rel="self"/>
  <link href="http://rogeralmeida.github.io/"/>
  <updated>2015-06-14T19:42:40+10:00</updated>
  <id>http://rogeralmeida.github.io/</id>
  <author>
    <name><![CDATA[Roger Almeida]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to learn Vim]]></title>
    <link href="http://rogeralmeida.github.io/blog/2015/02/02/how-to-learn-vim/"/>
    <updated>2015-02-02T01:40:04+11:00</updated>
    <id>http://rogeralmeida.github.io/blog/2015/02/02/how-to-learn-vim</id>
    <content type="html"><![CDATA[<p>This is a collection of adivces regards how to learn Vim. I collected this advices part during my learning process, part hearing|reading from my colleagues. I do believe that anyone can learning, or even master, vim though these advices.</p>

<!-- MORE -->


<h1>vimtutor</h1>

<p>At least once a week open a terminal and type: `vimtutor</p>

<h1>shortcutfoo</h1>

<h1>CheatSheet</h1>

<h1>vim adventures</h1>

<h1>vimcasts</h1>

<h1>pair programming</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Illusion of Competence]]></title>
    <link href="http://rogeralmeida.github.io/blog/2015/01/13/illusion-of-competence/"/>
    <updated>2015-01-13T03:15:16+11:00</updated>
    <id>http://rogeralmeida.github.io/blog/2015/01/13/illusion-of-competence</id>
    <content type="html"><![CDATA[<p>I did the <a href="https://www.coursera.org/">Cousera&rsquo;s</a> course <a href="https://www.coursera.org/course/learning">Learning How to Learn: Powerful mental tools to help you master tough subjects</a>. It was a pleasant course with many useful informations and a lot of useful techniques to speed up my learning ability.
One point that caught my attention was the Illusion Of Competence and I would like to share with you how I added this knowledge to my day.</p>

<!--more-->


<h2>Illusions of Competence</h2>

<p>Our brain can fool us in many ways. When someone explains a subject and we could follow the explanation, we believe that we understood it. Furthermore we think that we are able to work with this new information. But we are not. Give you a example, think about learning to ride a bicycle. The only way to learn it is by doing it. Thatâ€™s why when our teachers explained a subject to us, they as a rule gave us exercises to practice that subject.</p>

<h2>Illusions of Competence in a developer&rsquo;s day</h2>

<p>After doing the course I started paying attention to verify if I had some moments of Illusions of Competence in my day-by-day.  And indeed, it happens a lot. I could observe that during a <a href="http://www.quora.com/What-does-a-Thoughtworks-Inception-Workshop-look-like">Project&rsquo;s Inception</a> my colleagues and I heard explanations a few times. But when we had to use what we just learned we could not make a good use of it. This is because we didn&rsquo;t learned the subject. Or&hellip; Instead of acquiring competence in the subject we had a Illusion of Competence.</p>

<h2>How to avoid it</h2>

<p>After noticing that the Illusion of Competence was happening to me, actually us, I decide to fight against it. But, here comes the question: How?
The same way we did at school:</p>

<ul>
<li>Making questions</li>
<li>Explaining to a friend</li>
<li>Doing exercises</li>
</ul>


<h3>Making Question</h3>

<p>It was easy to do not value a explanation or be hard to focus on a explanation. One way to keep focus in a explanation is to get involved in the explanation, been part of it. Making a question is a good way to tell your brain that you are part of the explanation.</p>

<h3>Explaning to a friend</h3>

<p>When someone explain anything it&rsquo;s common to finish a topic saying:</p>

<ul>
<li>Did you get it?</li>
<li>Did you understand?</li>
<li>OK?</li>
</ul>


<p>And we are used to answer: &ldquo;Yes&rdquo;, &ldquo;Uhum&rdquo;.
But that is born of the Illusion of Competence.
To avoid it, now when I receive the question: &ldquo;Do you understand?&rdquo; My answer is: &ldquo;Can I explain to validate that I understood it?&rdquo;
By explaining what I just heard is a great opportunity to find gaps or raise points that were not covered by previous explanation.</p>

<h3>Doing exercises</h3>

<p>When I learn a new process|workflow I like to draw it and show it to how explained it to me. That&rsquo;s a good way to be sure that I&rsquo;m able to reproduce the process|workflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015: year's resolutions]]></title>
    <link href="http://rogeralmeida.github.io/blog/2015/01/13/2015-years-resolutions/"/>
    <updated>2015-01-13T00:49:32+11:00</updated>
    <id>http://rogeralmeida.github.io/blog/2015/01/13/2015-years-resolutions</id>
    <content type="html"><![CDATA[<p>These are my new year&rsquo;s resolutions:</p>

<ul>
<li>Run a 5k race</li>
<li>Read 12 tech books (1 by month in avg)</li>
<li>Move close to work (20~40 minutes of daily commute)</li>
<li>Get back to play/sing</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Euler's Journey Problem 1]]></title>
    <link href="http://rogeralmeida.github.io/blog/2014/12/30/eulers-journey-problem-1/"/>
    <updated>2014-12-30T06:38:43+11:00</updated>
    <id>http://rogeralmeida.github.io/blog/2014/12/30/eulers-journey-problem-1</id>
    <content type="html"><![CDATA[<p>So I decided to start a project where I gonna implement the same problem in many languages. I always wanted to compare how different programming languages face some coding challenges. I don&rsquo;t want to prove that any language is better than other, althought I know that this kind of flame will happen.
To have a organized list of problems I gonna use the <a href="http://projecteuler.net/">Project Euler</a> problems.</p>

<!--more-->


<h1>First Problem: Multiples of 3 and 5</h1>

<p>So the first step of this jorney is the <a href="https://projecteuler.net/problem=1">Multiples of 3 and 5</a>.</p>

<blockquote><p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.</p></blockquote>

<p>And here are the may implementations:</p>

<h2>Java 1.8</h2>

<figure class='code'><figcaption><span>SumMutiplesOf3And5</span><a href='https://github.com/rogeralmeida/eulersjourney/blob/master/problems/1/java1.8/src/main/java/com/github/rogeralmeida/eulersjourney/SumMultiplesOf3And5.java'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='Java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">rogeralmeida</span><span class="o">.</span><span class="na">eulersjourney</span><span class="o">;</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">* Created by ralmeid on 12/25/14.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SumMultiplesOf3And5</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>      <span class="n">Integer</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">number</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="o">;</span> <span class="n">number</span><span class="o">++){</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
</span><span class='line'>              <span class="n">sum</span> <span class="o">+=</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;The sum of multiples of 3 and 5 below 1000 is %d&quot;</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not much to say about the Java version. It is a little verbose, but still very easy to teach to programming students, as there&rsquo;s no hidden concept here. Everything is very explicit.</p>

<h2>Scala</h2>

<figure class='code'><figcaption><span>Multiples</span><a href='https://github.com/rogeralmeida/eulersjourney/blob/master/problems/1/scala/src/Multiples.scala'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="k">object</span> <span class="nc">Multiples</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span> <span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">var</span> <span class="n">number</span> <span class="k">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">var</span> <span class="n">sum</span> <span class="k">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="n">number</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">to</span> <span class="mi">999</span> <span class="k">if</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
</span><span class='line'>          <span class="n">sum</span> <span class="o">+=</span> <span class="n">number</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">printf</span><span class="o">(</span><span class="s">&quot;The sum of multiples of 3 and 5 bellow 1000 is %d&quot;</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I do not code in Scala, but have decided to add it to my toolbet in 2015. So I will make an effort to implement every problem in Scala as well.
I hope there&rsquo;s a less verbose way to do it in Scala, because I&rsquo;m not happy with this code.
One point that I would like to highlight here is the way to create a <a href="http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.Range">Range</a> <code>1 to 999</code>. Also you can filter the for&rsquo;s enumerables without executing the for body.</p>

<hr />

<p>Yes, I&rsquo;ve found a better way of doing it in Scala. Check this out:</p>

<figure class='code'><figcaption><span>Multiples</span><a href='https://github.com/rogeralmeida/eulersjourney/blob/master/problems/1/scala/src/Multiples.scala'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='Scala'><span class='line'><span class="k">object</span> <span class="nc">Multiples</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">main</span> <span class="o">(</span><span class="n">args</span><span class="k">:</span> <span class="kt">Array</span><span class="o">[</span><span class="kt">String</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">total</span> <span class="k">=</span> <span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">999</span><span class="o">).</span><span class="n">toList</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="n">number</span> <span class="k">=&gt;</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="o">).</span>
</span><span class='line'>      <span class="n">reduce</span><span class="o">[</span><span class="kt">Int</span><span class="o">]((</span><span class="n">accumulator</span><span class="o">,</span> <span class="n">number</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">accumulator</span><span class="o">+</span><span class="n">number</span><span class="o">)</span>
</span><span class='line'>    <span class="n">printf</span><span class="o">(</span><span class="s">&quot;The sum of multiples of 3 and 5 bellow 1000 is %d&quot;</span><span class="o">,</span> <span class="n">total</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First create a Range from 1 to 999.
Then coarse it to a List.
Then filter the list to get just the multiples of 3 or 5.
Then reduce the list using a accumulator.
I do liked this version, very concise, but the syntax is not that clear yet.</p>

<h2>Javascript</h2>

<figure class='code'><figcaption><span>multiples.js</span><a href='https://github.com/rogeralmeida/eulersjourney/blob/master/problems/1/javascript/multiples.js'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='Javascript'><span class='line'><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="nx">number</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">number</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="nx">number</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">number</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;The sum of multiples of 3 and 5 bellow 1000 is &quot;</span><span class="o">+</span><span class="nx">sum</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not much to say here, very straightforward.</p>

<h2>Python 2</h2>

<figure class='code'><figcaption><span>multiples.py</span><a href='https://github.com/rogeralmeida/eulersjourney/blob/master/problems/1/python2/multiples.py'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="n">multiples</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="n">number</span> <span class="k">for</span> <span class="n">number</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)])</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;The sum of multiples of 3 and 5 bellow 1000 is {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">multiples</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The more I touch Python, more I like it.
It uses the <a href="https://docs.python.org/2/library/functions.html">range</a> function to generate the list of number from 1 to 999.
It uses <a href="https://docs.python.org/2/tutorial/datastructures.html">List Comprehension</a> to generate a list with only the multiples <code>[number for number in range(1, 1000) if (number % 3 == 0) or (number % 5 == 0)]</code> then it uses the <code>sum()</code> function to sum up the multiples.</p>

<h2>Ruby</h2>

<figure class='code'><figcaption><span>mutiples.rb</span><a href='https://github.com/rogeralmeida/eulersjourney/blob/master/problems/1/ruby/multiples.rb'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">sum</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">999</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">number</span><span class="o">|</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">number</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;The sum of multiples of 3 and 5 is </span><span class="si">#{</span><span class="n">sum</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>My favorite version so far.
First I like the way to create the range <code>(1..999)</code>. Like the Scala way it stills a little bit magical but this is it, or you have a Global function like Python or you have some sintax to recognize that you are creating a range.
The <code>select</code> method is very useful to filter a collection. The <code>reduce</code> method receives a symbol with the method that should be called to reduce the list, and it understand that it has to accumulate the value.</p>
]]></content>
  </entry>
  
</feed>
